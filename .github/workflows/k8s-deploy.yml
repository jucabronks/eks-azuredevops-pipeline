name: Kubernetes CI/CD com Argo Rollouts

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'app.js'
      - 'package.json'
      - 'Dockerfile'
      - 'kubernetes/**'
      - '.github/workflows/k8s-deploy.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'app.js'
      - 'package.json'
      - 'Dockerfile'
      - 'kubernetes/**'
      - '.github/workflows/k8s-deploy.yml'

env:
  REGISTRY: docker.io
  IMAGE_NAME: projeto-vm-app

jobs:
  # =============================================================================
  # BUILD AND TEST
  # =============================================================================
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    # Faz checkout do código-fonte do repositório
    - name: Checkout code
      uses: actions/checkout@v4

    # Configura o Docker Buildx para builds mais rápidos e eficientes
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Faz login no Docker Hub para poder fazer push das imagens
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Extrai metadados da imagem (tags, labels) baseado no commit e branch
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    # Constrói e faz push da imagem Docker para o registry
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Testa se a imagem Docker funciona corretamente
    - name: Run container tests
      run: |
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} node -e "console.log('App is working!')"

  # =============================================================================
  # SCAN DE VULNERABILIDADES
  # =============================================================================
  trivy-scan:
    name: Scan de Vulnerabilidades com Trivy
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Faz checkout do código-fonte do repositório
      - name: Checkout do código
        uses: actions/checkout@v4

      # Instala o Trivy, ferramenta de scan de vulnerabilidades open source
      - name: Instalar Trivy
        uses: aquasecurity/trivy-action@v0.13.1

      # Faz login no Docker Hub para poder buildar e escanear a imagem
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Constrói a imagem Docker localmente para ser escaneada
      - name: Build Docker image para scan
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .

      # Roda o Trivy para escanear vulnerabilidades na imagem Docker
      # O pipeline falha se encontrar vulnerabilidades HIGH ou CRITICAL
      - name: Scan de vulnerabilidades na imagem Docker
        run: |
          trivy image --exit-code 1 --severity HIGH,CRITICAL ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      # Roda o Trivy para escanear vulnerabilidades em arquivos de infraestrutura como código (Terraform)
      - name: Scan de vulnerabilidades em IaC (Terraform)
        run: |
          trivy config ./terraform/

  # =============================================================================
  # DEPLOY TO DEV
  # =============================================================================
  deploy-dev:
    name: Deploy to Dev
    runs-on: ubuntu-latest
    needs: [build, trivy-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    strategy:
      matrix:
        cloud: [aws, azure, gcp]
        environment: [dev]
    
    steps:
    # Faz checkout do código-fonte do repositório
    - name: Checkout code
      uses: actions/checkout@v4

    # Instala o kubectl para interagir com o cluster Kubernetes
    - name: Install kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: 'latest'

    # Instala o Helm para gerenciar charts e releases
    - name: Install Helm
      uses: azure/setup-helm@v4
      with:
        version: 'latest'

    # Instala o plugin do Argo Rollouts para gerenciar deploys progressivos
    - name: Install Argo Rollouts plugin
      run: |
        curl -LO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
        chmod +x kubectl-argo-rollouts-linux-amd64
        sudo mv kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts

    # Configura credenciais AWS para acessar o cluster EKS
    - name: Configure AWS credentials
      if: matrix.cloud == 'aws'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    # Configura credenciais Azure para acessar o cluster AKS
    - name: Configure Azure credentials
      if: matrix.cloud == 'azure'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Configura credenciais GCP para acessar o cluster GKE
    - name: Configure GCP credentials
      if: matrix.cloud == 'gcp'
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    # Conecta ao cluster EKS da AWS e verifica se está funcionando
    - name: Get kubeconfig AWS
      if: matrix.cloud == 'aws'
      run: |
        aws eks update-kubeconfig --region us-east-1 --name projeto-vm-dev
        kubectl get nodes

    # Conecta ao cluster AKS do Azure e verifica se está funcionando
    - name: Get kubeconfig Azure
      if: matrix.cloud == 'azure'
      run: |
        az aks get-credentials --resource-group projeto-vm-dev-rg --name projeto-vm-dev --overwrite-existing
        kubectl get nodes

    # Conecta ao cluster GKE do GCP e verifica se está funcionando
    - name: Get kubeconfig GCP
      if: matrix.cloud == 'gcp'
      run: |
        gcloud container clusters get-credentials projeto-vm-dev --region us-central1
        kubectl get nodes

    # Cria um backup Velero automático antes do deploy
    # Este step garante que, caso o deploy cause problemas, seja possível restaurar o estado anterior do cluster.
    # O backup recebe um nome único com data/hora e o ambiente.
    - name: Backup Velero antes do deploy
      run: |
        velero backup create pre-deploy-${{ matrix.environment }}-$(date +%Y%m%d%H%M%S) --wait

    # Cria o namespace do ambiente se não existir
    - name: Create namespace
      run: |
        kubectl create namespace projeto-vm-dev --dry-run=client -o yaml | kubectl apply -f -

    # Define variáveis de ambiente para o deploy
    - name: Set environment namespace
      run: echo "NAMESPACE=${{ matrix.environment }}" >> $GITHUB_ENV

    # Aplica os recursos base (Service e Ingress) que não mudam com o deploy
    - name: Deploy base resources (service, ingress)
      run: |
        envsubst < kubernetes/base/service.yaml | kubectl apply -f -
        envsubst < kubernetes/base/ingress.yaml | kubectl apply -f -
      env:
        NAMESPACE: ${{ matrix.environment }}

    # Aplica o Rollout do Argo Rollouts com a nova imagem
    # O Rollout substitui o Deployment tradicional e permite deploy canário com rollback automático
    - name: Deploy com Argo Rollouts
      run: |
        # Atualiza a imagem no manifesto do Rollout
        sed -i "s|SEU_REGISTRY/projeto-vm-app:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|g" kubernetes/argo-rollouts/rollout-projeto-vm-app.yaml
        # Aplica o Rollout no cluster
        kubectl apply -f kubernetes/argo-rollouts/rollout-projeto-vm-app.yaml

    # Monitora o rollout e executa rollback automático se falhar
    # Este step aguarda até 5 minutos pelo sucesso do rollout. Se não ficar saudável, faz rollback automático.
    - name: Monitorar rollout e rollback automático
      run: |
        set -e
        rollout_name=projeto-vm-app
        namespace=projeto-vm-dev
        # Aguarda até 5 minutos pelo sucesso do rollout
        if ! timeout 300s kubectl argo rollouts get rollout $rollout_name -n $namespace --watch | grep -q 'Healthy'; then
          echo "Rollout falhou, executando rollback..."
          kubectl argo rollouts undo $rollout_name -n $namespace
          exit 1
        fi

    # Verifica se os recursos foram criados corretamente
    - name: Verify deployment
      run: |
        kubectl get pods -n projeto-vm-dev
        kubectl get svc -n projeto-vm-dev
        kubectl get ingress -n projeto-vm-dev
        kubectl argo rollouts get rollout projeto-vm-app -n projeto-vm-dev

    # Executa testes de saúde na aplicação
    - name: Run health check
      run: |
        # Aguarda os pods ficarem prontos
        kubectl wait --for=condition=ready pod -l app=projeto-vm-app -n projeto-vm-dev --timeout=300s
        
        # Obtém a URL do serviço
        SERVICE_URL=$(kubectl get svc projeto-vm-app -n projeto-vm-dev -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        if [ -z "$SERVICE_URL" ]; then
          SERVICE_URL=$(kubectl get svc projeto-vm-app -n projeto-vm-dev -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        fi
        
        # Testa o endpoint de saúde
        curl -f http://$SERVICE_URL/health || echo "Health check failed"

  # =============================================================================
  # DEPLOY TO STAGING
  # =============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, trivy-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    strategy:
      matrix:
        cloud: [aws, azure, gcp]
        environment: [staging]
    
    steps:
    # Faz checkout do código-fonte do repositório
    - name: Checkout code
      uses: actions/checkout@v4

    # Instala o kubectl para interagir com o cluster Kubernetes
    - name: Install kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: 'latest'

    # Instala o Helm para gerenciar charts e releases
    - name: Install Helm
      uses: azure/setup-helm@v4
      with:
        version: 'latest'

    # Instala o plugin do Argo Rollouts para gerenciar deploys progressivos
    - name: Install Argo Rollouts plugin
      run: |
        curl -LO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
        chmod +x kubectl-argo-rollouts-linux-amd64
        sudo mv kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts

    # Configura credenciais AWS para acessar o cluster EKS
    - name: Configure AWS credentials
      if: matrix.cloud == 'aws'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    # Configura credenciais Azure para acessar o cluster AKS
    - name: Configure Azure credentials
      if: matrix.cloud == 'azure'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Configura credenciais GCP para acessar o cluster GKE
    - name: Configure GCP credentials
      if: matrix.cloud == 'gcp'
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    # Conecta ao cluster EKS da AWS e verifica se está funcionando
    - name: Get kubeconfig AWS
      if: matrix.cloud == 'aws'
      run: |
        aws eks update-kubeconfig --region us-east-1 --name projeto-vm-staging
        kubectl get nodes

    # Conecta ao cluster AKS do Azure e verifica se está funcionando
    - name: Get kubeconfig Azure
      if: matrix.cloud == 'azure'
      run: |
        az aks get-credentials --resource-group projeto-vm-staging-rg --name projeto-vm-staging --overwrite-existing
        kubectl get nodes

    # Conecta ao cluster GKE do GCP e verifica se está funcionando
    - name: Get kubeconfig GCP
      if: matrix.cloud == 'gcp'
      run: |
        gcloud container clusters get-credentials projeto-vm-staging --region us-central1
        kubectl get nodes

    # Cria um backup Velero automático antes do deploy
    # Este step garante que, caso o deploy cause problemas, seja possível restaurar o estado anterior do cluster.
    # O backup recebe um nome único com data/hora e o ambiente.
    - name: Backup Velero antes do deploy
      run: |
        velero backup create pre-deploy-${{ matrix.environment }}-$(date +%Y%m%d%H%M%S) --wait

    # Cria o namespace do ambiente se não existir
    - name: Create namespace
      run: |
        kubectl create namespace projeto-vm-staging --dry-run=client -o yaml | kubectl apply -f -

    # Define variáveis de ambiente para o deploy
    - name: Set environment namespace
      run: echo "NAMESPACE=${{ matrix.environment }}" >> $GITHUB_ENV

    # Aplica os recursos base (Service e Ingress) que não mudam com o deploy
    - name: Deploy base resources (service, ingress)
      run: |
        envsubst < kubernetes/base/service.yaml | kubectl apply -f -
        envsubst < kubernetes/base/ingress.yaml | kubectl apply -f -
      env:
        NAMESPACE: ${{ matrix.environment }}

    # Aplica o Rollout do Argo Rollouts com a nova imagem
    # O Rollout substitui o Deployment tradicional e permite deploy canário com rollback automático
    - name: Deploy com Argo Rollouts
      run: |
        # Atualiza a imagem no manifesto do Rollout
        sed -i "s|SEU_REGISTRY/projeto-vm-app:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|g" kubernetes/argo-rollouts/rollout-projeto-vm-app.yaml
        # Aplica o Rollout no cluster
        kubectl apply -f kubernetes/argo-rollouts/rollout-projeto-vm-app.yaml

    # Monitora o rollout e executa rollback automático se falhar
    # Este step aguarda até 5 minutos pelo sucesso do rollout. Se não ficar saudável, faz rollback automático.
    - name: Monitorar rollout e rollback automático
      run: |
        set -e
        rollout_name=projeto-vm-app
        namespace=projeto-vm-staging
        # Aguarda até 5 minutos pelo sucesso do rollout
        if ! timeout 300s kubectl argo rollouts get rollout $rollout_name -n $namespace --watch | grep -q 'Healthy'; then
          echo "Rollout falhou, executando rollback..."
          kubectl argo rollouts undo $rollout_name -n $namespace
          exit 1
        fi

    # Executa testes de integração na aplicação
    - name: Run integration tests
      run: |
        # Aguarda os pods ficarem prontos
        kubectl wait --for=condition=ready pod -l app=projeto-vm-app -n projeto-vm-staging --timeout=300s
        
        # Obtém a URL do serviço
        SERVICE_URL=$(kubectl get svc projeto-vm-app -n projeto-vm-staging -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        if [ -z "$SERVICE_URL" ]; then
          SERVICE_URL=$(kubectl get svc projeto-vm-app -n projeto-vm-staging -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        fi
        
        # Executa testes de integração
        curl -f http://$SERVICE_URL/health
        curl -f http://$SERVICE_URL/
        curl -f http://$SERVICE_URL/metadata

  # =============================================================================
  # DEPLOY TO PRODUCTION
  # =============================================================================
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, trivy-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    strategy:
      matrix:
        cloud: [aws, azure, gcp]
        environment: [production]
    
    steps:
    # Faz checkout do código-fonte do repositório
    - name: Checkout code
      uses: actions/checkout@v4

    # Instala o kubectl para interagir com o cluster Kubernetes
    - name: Install kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: 'latest'

    # Instala o Helm para gerenciar charts e releases
    - name: Install Helm
      uses: azure/setup-helm@v4
      with:
        version: 'latest'

    # Instala o plugin do Argo Rollouts para gerenciar deploys progressivos
    - name: Install Argo Rollouts plugin
      run: |
        curl -LO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
        chmod +x kubectl-argo-rollouts-linux-amd64
        sudo mv kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts

    # Configura credenciais AWS para acessar o cluster EKS
    - name: Configure AWS credentials
      if: matrix.cloud == 'aws'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    # Configura credenciais Azure para acessar o cluster AKS
    - name: Configure Azure credentials
      if: matrix.cloud == 'azure'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Configura credenciais GCP para acessar o cluster GKE
    - name: Configure GCP credentials
      if: matrix.cloud == 'gcp'
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    # Conecta ao cluster EKS da AWS e verifica se está funcionando
    - name: Get kubeconfig AWS
      if: matrix.cloud == 'aws'
      run: |
        aws eks update-kubeconfig --region us-east-1 --name projeto-vm-prod
        kubectl get nodes

    # Conecta ao cluster AKS do Azure e verifica se está funcionando
    - name: Get kubeconfig Azure
      if: matrix.cloud == 'azure'
      run: |
        az aks get-credentials --resource-group projeto-vm-prod-rg --name projeto-vm-prod --overwrite-existing
        kubectl get nodes

    # Conecta ao cluster GKE do GCP e verifica se está funcionando
    - name: Get kubeconfig GCP
      if: matrix.cloud == 'gcp'
      run: |
        gcloud container clusters get-credentials projeto-vm-prod --region us-central1
        kubectl get nodes

    # Cria um backup Velero automático antes do deploy
    # Este step garante que, caso o deploy cause problemas, seja possível restaurar o estado anterior do cluster.
    # O backup recebe um nome único com data/hora e o ambiente.
    - name: Backup Velero antes do deploy
      run: |
        velero backup create pre-deploy-${{ matrix.environment }}-$(date +%Y%m%d%H%M%S) --wait

    # Cria o namespace do ambiente se não existir
    - name: Create namespace
      run: |
        kubectl create namespace projeto-vm-prod --dry-run=client -o yaml | kubectl apply -f -

    # Define variáveis de ambiente para o deploy
    - name: Set environment namespace
      run: echo "NAMESPACE=${{ matrix.environment }}" >> $GITHUB_ENV

    # Aplica os recursos base (Service e Ingress) que não mudam com o deploy
    - name: Deploy base resources (service, ingress)
      run: |
        envsubst < kubernetes/base/service.yaml | kubectl apply -f -
        envsubst < kubernetes/base/ingress.yaml | kubectl apply -f -
      env:
        NAMESPACE: ${{ matrix.environment }}

    # Aplica o Rollout do Argo Rollouts com a nova imagem
    # O Rollout substitui o Deployment tradicional e permite deploy canário com rollback automático
    - name: Deploy com Argo Rollouts
      run: |
        # Atualiza a imagem no manifesto do Rollout
        sed -i "s|SEU_REGISTRY/projeto-vm-app:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|g" kubernetes/argo-rollouts/rollout-projeto-vm-app.yaml
        # Aplica o Rollout no cluster
        kubectl apply -f kubernetes/argo-rollouts/rollout-projeto-vm-app.yaml

    # Monitora o rollout e executa rollback automático se falhar
    # Este step aguarda até 5 minutos pelo sucesso do rollout. Se não ficar saudável, faz rollback automático.
    - name: Monitorar rollout e rollback automático
      run: |
        set -e
        rollout_name=projeto-vm-app
        namespace=projeto-vm-prod
        # Aguarda até 5 minutos pelo sucesso do rollout
        if ! timeout 300s kubectl argo rollouts get rollout $rollout_name -n $namespace --watch | grep -q 'Healthy'; then
          echo "Rollout falhou, executando rollback..."
          kubectl argo rollouts undo $rollout_name -n $namespace
          exit 1
        fi

    # Executa testes completos de produção
    - name: Run production tests
      run: |
        # Aguarda os pods ficarem prontos
        kubectl wait --for=condition=ready pod -l app=projeto-vm-app -n projeto-vm-prod --timeout=300s
        
        # Obtém a URL do serviço
        SERVICE_URL=$(kubectl get svc projeto-vm-app -n projeto-vm-prod -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        if [ -z "$SERVICE_URL" ]; then
          SERVICE_URL=$(kubectl get svc projeto-vm-app -n projeto-vm-prod -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        fi
        
        # Executa testes completos de produção
        curl -f http://$SERVICE_URL/health
        curl -f http://$SERVICE_URL/
        curl -f http://$SERVICE_URL/metadata
        
        # Verifica se todas as réplicas estão rodando
        kubectl get pods -n projeto-vm-prod -l app=projeto-vm-app

  # =============================================================================
  # NOTIFICATIONS
  # =============================================================================
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-prod]
    if: always()
    
    steps:
    # Envia notificação para o Slack sobre o status do deploy
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#devops'
        text: |
          Kubernetes deployment ${{ job.status }} for ${{ github.repository }}
          Environment: ${{ needs.deploy-dev.result || needs.deploy-staging.result || needs.deploy-prod.result }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    # Cria um resumo do deploy para visualização no GitHub
    - name: Create Deployment Summary
      if: always()
      run: |
        echo "## Kubernetes Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Author:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image:** ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Results:" >> $GITHUB_STEP_SUMMARY
        echo "- Dev: ${{ needs.deploy-dev.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Staging: ${{ needs.deploy-staging.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Production: ${{ needs.deploy-prod.result }}" >> $GITHUB_STEP_SUMMARY 