name: Terraform CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'

env:
  TF_VERSION: "1.5.0"
  AWS_REGION: "us-east-1"
  AZURE_LOCATION: "eastus"
  GCP_REGION: "us-central1"

jobs:
  # =============================================================================
  # TERRAFORM VALIDATION
  # =============================================================================
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        cloud: [aws, azure, gcp]
        environment: [dev, staging]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      run: |
        cd terraform/${{ matrix.cloud }}
        terraform fmt -check -recursive

    - name: Terraform Init
      run: |
        cd terraform/${{ matrix.cloud }}
        terraform init -backend=false

    - name: Terraform Validate
      run: |
        cd terraform/${{ matrix.cloud }}
        terraform validate

    - name: Terraform Plan (Dry Run)
      run: |
        cd terraform/${{ matrix.cloud }}
        terraform plan -var-file="environments/${{ matrix.environment }}.tfvars" -out=tfplan
      env:
        TF_VAR_environment: ${{ matrix.environment }}

  # =============================================================================
  # SECURITY SCANNING
  # =============================================================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: terraform/
        framework: terraform
        output_format: sarif
        output_file_path: checkov-results.sarif

    - name: Upload Checkov scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'checkov-results.sarif'

  # =============================================================================
  # DEPLOY TO DEV
  # =============================================================================
  deploy-dev:
    name: Deploy to Dev
    runs-on: ubuntu-latest
    needs: [validate, security]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    strategy:
      matrix:
        cloud: [aws, azure, gcp]
    
    environment: dev
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      if: matrix.cloud == 'aws'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Configure Azure credentials
      if: matrix.cloud == 'azure'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Configure GCP credentials
      if: matrix.cloud == 'gcp'
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Terraform Init
      run: |
        cd terraform/${{ matrix.cloud }}
        terraform init

    - name: Terraform Plan
      run: |
        cd terraform/${{ matrix.cloud }}
        terraform plan -var-file="environments/dev.tfvars" -out=tfplan
      env:
        TF_VAR_environment: dev

    - name: Terraform Apply
      run: |
        cd terraform/${{ matrix.cloud }}
        terraform apply -auto-approve tfplan
      env:
        TF_VAR_environment: dev

    - name: Run Tests
      run: |
        cd terraform/${{ matrix.cloud }}
        ./scripts/test-deployment.sh dev

  # =============================================================================
  # DEPLOY TO STAGING
  # =============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [validate, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    strategy:
      matrix:
        cloud: [aws, azure, gcp]
    
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      if: matrix.cloud == 'aws'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Configure Azure credentials
      if: matrix.cloud == 'azure'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Configure GCP credentials
      if: matrix.cloud == 'gcp'
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Terraform Init
      run: |
        cd terraform/${{ matrix.cloud }}
        terraform init

    - name: Terraform Plan
      run: |
        cd terraform/${{ matrix.cloud }}
        terraform plan -var-file="environments/staging.tfvars" -out=tfplan
      env:
        TF_VAR_environment: staging

    - name: Terraform Apply
      run: |
        cd terraform/${{ matrix.cloud }}
        terraform apply -auto-approve tfplan
      env:
        TF_VAR_environment: staging

    - name: Run Integration Tests
      run: |
        cd terraform/${{ matrix.cloud }}
        ./scripts/test-deployment.sh staging

  # =============================================================================
  # DEPLOY TO PROD
  # =============================================================================
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    strategy:
      matrix:
        cloud: [aws, azure, gcp]
    
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      if: matrix.cloud == 'aws'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Configure Azure credentials
      if: matrix.cloud == 'azure'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Configure GCP credentials
      if: matrix.cloud == 'gcp'
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Terraform Init
      run: |
        cd terraform/${{ matrix.cloud }}
        terraform init

    - name: Terraform Plan
      run: |
        cd terraform/${{ matrix.cloud }}
        terraform plan -var-file="environments/prod.tfvars" -out=tfplan
      env:
        TF_VAR_environment: prod

    - name: Terraform Apply
      run: |
        cd terraform/${{ matrix.cloud }}
        terraform apply -auto-approve tfplan
      env:
        TF_VAR_environment: prod

    - name: Run Production Tests
      run: |
        cd terraform/${{ matrix.cloud }}
        ./scripts/test-deployment.sh prod

  # =============================================================================
  # NOTIFICATIONS
  # =============================================================================
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-prod]
    if: always()
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#devops'
        text: |
          Terraform deployment ${{ job.status }} for ${{ github.repository }}
          Environment: ${{ needs.deploy-dev.result || needs.deploy-staging.result || needs.deploy-prod.result }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Create Deployment Summary
      if: always()
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Author:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Results:" >> $GITHUB_STEP_SUMMARY
        echo "- Dev: ${{ needs.deploy-dev.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Staging: ${{ needs.deploy-staging.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Production: ${{ needs.deploy-prod.result }}" >> $GITHUB_STEP_SUMMARY 