# ============================================================================
# Azure DevOps Pipeline - Projeto VM
# Pipeline CI/CD com Argo Rollouts, Velero, Trivy e rollback automático
# 
# Este pipeline implementa um fluxo completo de CI/CD com:
# - Build e teste da aplicação
# - Scan de vulnerabilidades com Trivy
# - Backup automático com Velero antes de cada deploy
# - Deploy progressivo com Argo Rollouts
# - Rollback automático em caso de falha
# - Monitoramento e validação pós-deploy
# ============================================================================

# Configuração de triggers - define quando o pipeline deve executar
# Executa quando há mudanças nas branches main/develop ou nos arquivos especificados
trigger:
  branches:
    include:
    - main
    - develop
  paths:
    include:
    - app.js
    - package.json
    - Dockerfile
    - kubernetes/**
    - azure-pipelines.yml

# Variáveis do pipeline - carrega do grupo de variáveis configurado no Azure DevOps
variables:
- group: projeto-vm-variables  # Grupo de variáveis criado no Azure DevOps
- name: REGISTRY
  value: $(REGISTRY_NAME)
- name: IMAGE_NAME
  value: $(IMAGE_NAME)

stages:
# ============================================================================
# BUILD AND TEST - CONSTRUÇÃO E TESTE
# Esta etapa constrói a imagem Docker, executa testes e faz push para o registry
# ============================================================================
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'  # Usa o agente Ubuntu mais recente
    
    steps:
    # ============================================================================
    # CHECKOUT - BAIXA O CÓDIGO-FONTE
    # ============================================================================
    # Faz checkout do código-fonte do repositório Azure DevOps
    # fetchDepth: 0 baixa todo o histórico para ter acesso a todos os commits
    - task: Checkout@3
      displayName: 'Checkout code'
      inputs:
        fetchDepth: 0

    # ============================================================================
    # DOCKER BUILDX SETUP - CONFIGURAÇÃO DO DOCKER BUILDX
    # ============================================================================
    # Configura o Docker Buildx para builds mais rápidos e eficientes
    # Buildx permite builds paralelos e cache compartilhado
    - task: Docker@2
      displayName: 'Set up Docker Buildx'
      inputs:
        command: 'buildx'
        arguments: 'create --use'

    # ============================================================================
    # DOCKER LOGIN - AUTENTICAÇÃO NO REGISTRY
    # ============================================================================
    # Faz login no registry Docker (Azure Container Registry ou Docker Hub)
    # Usa a service connection configurada no Azure DevOps
    - task: Docker@2
      displayName: 'Log in to Docker Registry'
      inputs:
        command: 'login'
        containerRegistry: 'acr-connection'  # ou 'dockerhub-connection'

    # ============================================================================
    # DOCKER METADATA - EXTRAÇÃO DE METADADOS
    # ============================================================================
    # Extrai metadados da imagem (tags, labels) baseado no commit e branch
    # Útil para rastreabilidade e auditoria
    - task: Docker@2
      displayName: 'Extract metadata'
      inputs:
        command: 'buildx'
        arguments: 'imagetools inspect $(REGISTRY)/$(IMAGE_NAME):$(Build.SourceVersion)'

    # ============================================================================
    # DOCKER BUILD AND PUSH - CONSTRUÇÃO E ENVIO DA IMAGEM
    # ============================================================================
    # Constrói e faz push da imagem Docker para o registry
    # Cria duas tags: uma com o hash do commit e outra 'latest'
    - task: Docker@2
      displayName: 'Build and push Docker image'
      inputs:
        command: 'buildx'
        arguments: 'build --push --tag $(REGISTRY)/$(IMAGE_NAME):$(Build.SourceVersion) --tag $(REGISTRY)/$(IMAGE_NAME):latest .'
        repository: '$(REGISTRY)/$(IMAGE_NAME)'

    # ============================================================================
    # CONTAINER TEST - TESTE DA IMAGEM CONSTRUÍDA
    # ============================================================================
    # Testa se a imagem Docker funciona corretamente executando um comando simples
    # Garante que a aplicação pode ser iniciada sem erros
    - script: |
        docker run --rm $(REGISTRY)/$(IMAGE_NAME):$(Build.SourceVersion) node -e "console.log('App is working!')"
      displayName: 'Run container tests'

# ============================================================================
# SECURITY SCAN - SCAN DE VULNERABILIDADES
# Esta etapa escaneia a imagem Docker e arquivos de infraestrutura em busca de vulnerabilidades
# ============================================================================
- stage: SecurityScan
  displayName: 'Security Scan'
  dependsOn: Build  # Só executa se o Build foi bem-sucedido
  jobs:
  - job: TrivyScan
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    # ============================================================================
    # CHECKOUT - BAIXA O CÓDIGO-FONTE PARA SCAN
    # ============================================================================
    # Faz checkout do código-fonte do repositório
    - task: Checkout@3
      displayName: 'Checkout code'

    # ============================================================================
    # INSTALL TRIVY - INSTALAÇÃO DO TRIVY
    # ============================================================================
    # Instala o Trivy, ferramenta de scan de vulnerabilidades open source
    # Trivy escaneia imagens Docker, arquivos de configuração e dependências
    - script: |
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.13.1
      displayName: 'Install Trivy'

    # ============================================================================
    # DOCKER LOGIN FOR SCAN - LOGIN PARA ACESSAR A IMAGEM
    # ============================================================================
    # Faz login no registry Docker para poder baixar a imagem para scan
    - task: Docker@2
      displayName: 'Log in to Docker Registry'
      inputs:
        command: 'login'
        containerRegistry: 'acr-connection'

    # ============================================================================
    # BUILD FOR SCAN - CONSTRUÇÃO LOCAL PARA SCAN
    # ============================================================================
    # Constrói a imagem Docker localmente para ser escaneada
    # O scan é feito na imagem local para maior segurança
    - script: |
        docker build -t $(REGISTRY)/$(IMAGE_NAME):$(Build.SourceVersion) .
      displayName: 'Build Docker image for scan'

    # ============================================================================
    # SCAN DOCKER IMAGE - SCAN DA IMAGEM DOCKER
    # ============================================================================
    # Roda o Trivy para escanear vulnerabilidades na imagem Docker
    # O pipeline falha se encontrar vulnerabilidades HIGH ou CRITICAL
    # --exit-code 1 faz o pipeline falhar se encontrar vulnerabilidades
    - script: |
        trivy image --exit-code 1 --severity HIGH,CRITICAL $(REGISTRY)/$(IMAGE_NAME):$(Build.SourceVersion)
      displayName: 'Scan Docker image vulnerabilities'

    # ============================================================================
    # SCAN INFRASTRUCTURE CODE - SCAN DE INFRAESTRUTURA COMO CÓDIGO
    # ============================================================================
    # Roda o Trivy para escanear vulnerabilidades em arquivos de infraestrutura como código (Terraform)
    # Detecta configurações inseguras, credenciais hardcoded, etc.
    - script: |
        trivy config ./terraform/
      displayName: 'Scan IaC vulnerabilities'

# ============================================================================
# DEPLOY TO DEV - DEPLOY PARA DESENVOLVIMENTO
# Esta etapa faz deploy da aplicação no ambiente de desenvolvimento
# Só executa quando há push na branch 'develop'
# ============================================================================
- stage: DeployDev
  displayName: 'Deploy to Dev'
  dependsOn: SecurityScan  # Só executa se o SecurityScan foi bem-sucedido
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  jobs:
  - deployment: DeployDev
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'dev'  # Ambiente configurado no Azure DevOps
    strategy:
      runOnce:
        deploy:
          steps:
          # ============================================================================
          # CHECKOUT - BAIXA O CÓDIGO-FONTE PARA DEPLOY
          # ============================================================================
          # Faz checkout do código-fonte do repositório
          - task: Checkout@3
            displayName: 'Checkout code'

          # ============================================================================
          # INSTALL KUBECTL - INSTALAÇÃO DO KUBECTL
          # ============================================================================
          # Instala o kubectl para interagir com o cluster Kubernetes
          # Usa a versão mais recente para ter acesso a todas as funcionalidades
          - task: KubectlInstaller@0
            displayName: 'Install kubectl'
            inputs:
              kubectlVersion: 'latest'

          # ============================================================================
          # INSTALL HELM - INSTALAÇÃO DO HELM
          # ============================================================================
          # Instala o Helm para gerenciar charts e releases
          # Helm facilita o deploy de aplicações complexas no Kubernetes
          - task: HelmInstaller@0
            displayName: 'Install Helm'
            inputs:
              helmVersion: 'latest'

          # ============================================================================
          # INSTALL ARGO ROLLOUTS PLUGIN - INSTALAÇÃO DO PLUGIN ARGO ROLLOUTS
          # ============================================================================
          # Instala o plugin do Argo Rollouts para gerenciar deploys progressivos
          # Permite comandos como 'kubectl argo rollouts get rollout'
          - script: |
              curl -LO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
              chmod +x kubectl-argo-rollouts-linux-amd64
              sudo mv kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts
            displayName: 'Install Argo Rollouts plugin'

          # ============================================================================
          # GET KUBECONFIG - CONFIGURAÇÃO DO CLUSTER KUBERNETES
          # ============================================================================
          # Conecta ao cluster AKS e verifica se está funcionando
          # Baixa as credenciais do cluster e testa a conectividade
          - task: AzureCLI@2
            displayName: 'Get kubeconfig'
            inputs:
              azureSubscription: 'azure-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az aks get-credentials --resource-group projeto-vm-dev-rg --name projeto-vm-dev --overwrite-existing
                kubectl get nodes

          # ============================================================================
          # VELERO BACKUP - BACKUP ANTES DO DEPLOY
          # ============================================================================
          # Cria um backup Velero automático antes do deploy
          # Este step garante que, caso o deploy cause problemas, seja possível restaurar o estado anterior do cluster.
          # O backup recebe um nome único com data/hora e o ambiente.
          - script: |
              velero backup create pre-deploy-dev-$(date +%Y%m%d%H%M%S) --wait
            displayName: 'Backup Velero before deploy'

          # ============================================================================
          # CREATE NAMESPACE - CRIAÇÃO DO NAMESPACE
          # ============================================================================
          # Cria o namespace do ambiente se não existir
          # --dry-run=client simula a operação sem aplicar, depois aplica se necessário
          - script: |
              kubectl create namespace projeto-vm-dev --dry-run=client -o yaml | kubectl apply -f -
            displayName: 'Create namespace'

          # ============================================================================
          # DEPLOY BASE RESOURCES - DEPLOY DOS RECURSOS BASE
          # ============================================================================
          # Aplica os recursos base (Service e Ingress) que não mudam com o deploy
          # envsubst substitui variáveis nos templates antes de aplicar
          - script: |
              envsubst < kubernetes/base/service.yaml | kubectl apply -f -
              envsubst < kubernetes/base/ingress.yaml | kubectl apply -f -
            displayName: 'Deploy base resources'
            env:
              NAMESPACE: projeto-vm-dev

          # ============================================================================
          # DEPLOY ARGO ROLLOUTS - DEPLOY COM ARGO ROLLOUTS
          # ============================================================================
          # Aplica o Rollout do Argo Rollouts com a nova imagem
          # O Rollout substitui o Deployment tradicional e permite deploy canário com rollback automático
          - script: |
              # Atualiza a imagem no manifesto do Rollout
              sed -i "s|SEU_REGISTRY/projeto-vm-app:latest|$(REGISTRY)/$(IMAGE_NAME):$(Build.SourceVersion)|g" kubernetes/argo-rollouts/rollout-projeto-vm-app.yaml
              # Aplica o Rollout no cluster
              kubectl apply -f kubernetes/argo-rollouts/rollout-projeto-vm-app.yaml
            displayName: 'Deploy with Argo Rollouts'

          # ============================================================================
          # MONITOR ROLLOUT - MONITORAMENTO E ROLLBACK AUTOMÁTICO
          # ============================================================================
          # Monitora o rollout e executa rollback automático se falhar
          # Este step aguarda até 5 minutos pelo sucesso do rollout. Se não ficar saudável, faz rollback automático.
          - script: |
              set -e
              rollout_name=projeto-vm-app
              namespace=projeto-vm-dev
              # Aguarda até 5 minutos pelo sucesso do rollout
              if ! timeout 300s kubectl argo rollouts get rollout $rollout_name -n $namespace --watch | grep -q 'Healthy'; then
                echo "Rollout failed, executing rollback..."
                kubectl argo rollouts undo $rollout_name -n $namespace
                exit 1
              fi
            displayName: 'Monitor rollout and auto-rollback'

          # ============================================================================
          # VERIFY DEPLOYMENT - VERIFICAÇÃO DO DEPLOY
          # ============================================================================
          # Verifica se os recursos foram criados corretamente
          # Lista pods, serviços, ingress e status do rollout
          - script: |
              kubectl get pods -n projeto-vm-dev
              kubectl get svc -n projeto-vm-dev
              kubectl get ingress -n projeto-vm-dev
              kubectl argo rollouts get rollout projeto-vm-app -n projeto-vm-dev
            displayName: 'Verify deployment'

          # ============================================================================
          # HEALTH CHECK - TESTE DE SAÚDE DA APLICAÇÃO
          # ============================================================================
          # Executa testes de saúde na aplicação
          # Aguarda os pods ficarem prontos e testa os endpoints
          - script: |
              # Aguarda os pods ficarem prontos
              kubectl wait --for=condition=ready pod -l app=projeto-vm-app -n projeto-vm-dev --timeout=300s
              
              # Obtém a URL do serviço
              SERVICE_URL=$(kubectl get svc projeto-vm-app -n projeto-vm-dev -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
              if [ -z "$SERVICE_URL" ]; then
                SERVICE_URL=$(kubectl get svc projeto-vm-app -n projeto-vm-dev -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
              fi
              
              # Testa o endpoint de saúde
              curl -f http://$SERVICE_URL/health || echo "Health check failed"
            displayName: 'Run health check'

# ============================================================================
# DEPLOY TO STAGING - DEPLOY PARA STAGING
# Esta etapa faz deploy da aplicação no ambiente de staging
# Só executa quando há push na branch 'main'
# ============================================================================
- stage: DeployStaging
  displayName: 'Deploy to Staging'
  dependsOn: SecurityScan  # Só executa se o SecurityScan foi bem-sucedido
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployStaging
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'staging'  # Ambiente configurado no Azure DevOps
    strategy:
      runOnce:
        deploy:
          steps:
          # ============================================================================
          # CHECKOUT - BAIXA O CÓDIGO-FONTE PARA DEPLOY
          # ============================================================================
          # Faz checkout do código-fonte do repositório
          - task: Checkout@3
            displayName: 'Checkout code'

          # ============================================================================
          # INSTALL KUBECTL - INSTALAÇÃO DO KUBECTL
          # ============================================================================
          # Instala o kubectl para interagir com o cluster Kubernetes
          - task: KubectlInstaller@0
            displayName: 'Install kubectl'
            inputs:
              kubectlVersion: 'latest'

          # ============================================================================
          # INSTALL HELM - INSTALAÇÃO DO HELM
          # ============================================================================
          # Instala o Helm para gerenciar charts e releases
          - task: HelmInstaller@0
            displayName: 'Install Helm'
            inputs:
              helmVersion: 'latest'

          # ============================================================================
          # INSTALL ARGO ROLLOUTS PLUGIN - INSTALAÇÃO DO PLUGIN ARGO ROLLOUTS
          # ============================================================================
          # Instala o plugin do Argo Rollouts para gerenciar deploys progressivos
          - script: |
              curl -LO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
              chmod +x kubectl-argo-rollouts-linux-amd64
              sudo mv kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts
            displayName: 'Install Argo Rollouts plugin'

          # ============================================================================
          # GET KUBECONFIG - CONFIGURAÇÃO DO CLUSTER KUBERNETES
          # ============================================================================
          # Conecta ao cluster AKS de staging e verifica se está funcionando
          - task: AzureCLI@2
            displayName: 'Get kubeconfig'
            inputs:
              azureSubscription: 'azure-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az aks get-credentials --resource-group projeto-vm-staging-rg --name projeto-vm-staging --overwrite-existing
                kubectl get nodes

          # ============================================================================
          # VELERO BACKUP - BACKUP ANTES DO DEPLOY
          # ============================================================================
          # Cria um backup Velero automático antes do deploy em staging
          - script: |
              velero backup create pre-deploy-staging-$(date +%Y%m%d%H%M%S) --wait
            displayName: 'Backup Velero before deploy'

          # ============================================================================
          # CREATE NAMESPACE - CRIAÇÃO DO NAMESPACE
          # ============================================================================
          # Cria o namespace do ambiente staging se não existir
          - script: |
              kubectl create namespace projeto-vm-staging --dry-run=client -o yaml | kubectl apply -f -
            displayName: 'Create namespace'

          # ============================================================================
          # DEPLOY BASE RESOURCES - DEPLOY DOS RECURSOS BASE
          # ============================================================================
          # Aplica os recursos base (Service e Ingress) para staging
          - script: |
              envsubst < kubernetes/base/service.yaml | kubectl apply -f -
              envsubst < kubernetes/base/ingress.yaml | kubectl apply -f -
            displayName: 'Deploy base resources'
            env:
              NAMESPACE: projeto-vm-staging

          # ============================================================================
          # DEPLOY ARGO ROLLOUTS - DEPLOY COM ARGO ROLLOUTS
          # ============================================================================
          # Aplica o Rollout do Argo Rollouts com a nova imagem em staging
          - script: |
              sed -i "s|SEU_REGISTRY/projeto-vm-app:latest|$(REGISTRY)/$(IMAGE_NAME):$(Build.SourceVersion)|g" kubernetes/argo-rollouts/rollout-projeto-vm-app.yaml
              kubectl apply -f kubernetes/argo-rollouts/rollout-projeto-vm-app.yaml
            displayName: 'Deploy with Argo Rollouts'

          # ============================================================================
          # MONITOR ROLLOUT - MONITORAMENTO E ROLLBACK AUTOMÁTICO
          # ============================================================================
          # Monitora o rollout em staging e executa rollback automático se falhar
          - script: |
              set -e
              rollout_name=projeto-vm-app
              namespace=projeto-vm-staging
              if ! timeout 300s kubectl argo rollouts get rollout $rollout_name -n $namespace --watch | grep -q 'Healthy'; then
                echo "Rollout failed, executing rollback..."
                kubectl argo rollouts undo $rollout_name -n $namespace
                exit 1
              fi
            displayName: 'Monitor rollout and auto-rollback'

          # ============================================================================
          # INTEGRATION TESTS - TESTES DE INTEGRAÇÃO
          # ============================================================================
          # Executa testes de integração mais completos em staging
          # Testa múltiplos endpoints para garantir que a aplicação está funcionando
          - script: |
              kubectl wait --for=condition=ready pod -l app=projeto-vm-app -n projeto-vm-staging --timeout=300s
              SERVICE_URL=$(kubectl get svc projeto-vm-app -n projeto-vm-staging -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
              if [ -z "$SERVICE_URL" ]; then
                SERVICE_URL=$(kubectl get svc projeto-vm-app -n projeto-vm-staging -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
              fi
              curl -f http://$SERVICE_URL/health
              curl -f http://$SERVICE_URL/
              curl -f http://$SERVICE_URL/metadata
            displayName: 'Run integration tests'

# ============================================================================
# DEPLOY TO PRODUCTION - DEPLOY PARA PRODUÇÃO
# Esta etapa faz deploy da aplicação no ambiente de produção
# Só executa quando há push na branch 'main'
# ============================================================================
- stage: DeployProd
  displayName: 'Deploy to Production'
  dependsOn: SecurityScan  # Só executa se o SecurityScan foi bem-sucedido
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployProd
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'production'  # Ambiente configurado no Azure DevOps
    strategy:
      runOnce:
        deploy:
          steps:
          # ============================================================================
          # CHECKOUT - BAIXA O CÓDIGO-FONTE PARA DEPLOY
          # ============================================================================
          # Faz checkout do código-fonte do repositório
          - task: Checkout@3
            displayName: 'Checkout code'

          # ============================================================================
          # INSTALL KUBECTL - INSTALAÇÃO DO KUBECTL
          # ============================================================================
          # Instala o kubectl para interagir com o cluster Kubernetes
          - task: KubectlInstaller@0
            displayName: 'Install kubectl'
            inputs:
              kubectlVersion: 'latest'

          # ============================================================================
          # INSTALL HELM - INSTALAÇÃO DO HELM
          # ============================================================================
          # Instala o Helm para gerenciar charts e releases
          - task: HelmInstaller@0
            displayName: 'Install Helm'
            inputs:
              helmVersion: 'latest'

          # ============================================================================
          # INSTALL ARGO ROLLOUTS PLUGIN - INSTALAÇÃO DO PLUGIN ARGO ROLLOUTS
          # ============================================================================
          # Instala o plugin do Argo Rollouts para gerenciar deploys progressivos
          - script: |
              curl -LO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
              chmod +x kubectl-argo-rollouts-linux-amd64
              sudo mv kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts
            displayName: 'Install Argo Rollouts plugin'

          # ============================================================================
          # GET KUBECONFIG - CONFIGURAÇÃO DO CLUSTER KUBERNETES
          # ============================================================================
          # Conecta ao cluster AKS de produção e verifica se está funcionando
          - task: AzureCLI@2
            displayName: 'Get kubeconfig'
            inputs:
              azureSubscription: 'azure-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az aks get-credentials --resource-group projeto-vm-prod-rg --name projeto-vm-prod --overwrite-existing
                kubectl get nodes

          # ============================================================================
          # VELERO BACKUP - BACKUP ANTES DO DEPLOY
          # ============================================================================
          # Cria um backup Velero automático antes do deploy em produção
          # Backup crítico para garantir que podemos reverter se algo der errado
          - script: |
              velero backup create pre-deploy-prod-$(date +%Y%m%d%H%M%S) --wait
            displayName: 'Backup Velero before deploy'

          # ============================================================================
          # CREATE NAMESPACE - CRIAÇÃO DO NAMESPACE
          # ============================================================================
          # Cria o namespace do ambiente produção se não existir
          - script: |
              kubectl create namespace projeto-vm-prod --dry-run=client -o yaml | kubectl apply -f -
            displayName: 'Create namespace'

          # ============================================================================
          # DEPLOY BASE RESOURCES - DEPLOY DOS RECURSOS BASE
          # ============================================================================
          # Aplica os recursos base (Service e Ingress) para produção
          - script: |
              envsubst < kubernetes/base/service.yaml | kubectl apply -f -
              envsubst < kubernetes/base/ingress.yaml | kubectl apply -f -
            displayName: 'Deploy base resources'
            env:
              NAMESPACE: projeto-vm-prod

          # ============================================================================
          # DEPLOY ARGO ROLLOUTS - DEPLOY COM ARGO ROLLOUTS
          # ============================================================================
          # Aplica o Rollout do Argo Rollouts com a nova imagem em produção
          - script: |
              sed -i "s|SEU_REGISTRY/projeto-vm-app:latest|$(REGISTRY)/$(IMAGE_NAME):$(Build.SourceVersion)|g" kubernetes/argo-rollouts/rollout-projeto-vm-app.yaml
              kubectl apply -f kubernetes/argo-rollouts/rollout-projeto-vm-app.yaml
            displayName: 'Deploy with Argo Rollouts'

          # ============================================================================
          # MONITOR ROLLOUT - MONITORAMENTO E ROLLBACK AUTOMÁTICO
          # ============================================================================
          # Monitora o rollout em produção e executa rollback automático se falhar
          - script: |
              set -e
              rollout_name=projeto-vm-app
              namespace=projeto-vm-prod
              if ! timeout 300s kubectl argo rollouts get rollout $rollout_name -n $namespace --watch | grep -q 'Healthy'; then
                echo "Rollout failed, executing rollback..."
                kubectl argo rollouts undo $rollout_name -n $namespace
                exit 1
              fi
            displayName: 'Monitor rollout and auto-rollback'

          # ============================================================================
          # PRODUCTION TESTS - TESTES DE PRODUÇÃO
          # ============================================================================
          # Executa testes finais em produção para garantir que tudo está funcionando
          # Testa todos os endpoints críticos e verifica o status dos pods
          - script: |
              kubectl wait --for=condition=ready pod -l app=projeto-vm-app -n projeto-vm-prod --timeout=300s
              SERVICE_URL=$(kubectl get svc projeto-vm-app -n projeto-vm-prod -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
              if [ -z "$SERVICE_URL" ]; then
                SERVICE_URL=$(kubectl get svc projeto-vm-app -n projeto-vm-prod -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
              fi
              curl -f http://$SERVICE_URL/health
              curl -f http://$SERVICE_URL/
              curl -f http://$SERVICE_URL/metadata
              kubectl get pods -n projeto-vm-prod -l app=projeto-vm-app
            displayName: 'Run production tests' 